package com.appthwack.appthwack;

import java.util.List;
import java.util.HashMap;
import java.io.File;

import com.appthwack.appthwack.AppThwackResult;
import com.appthwack.appthwack.AppThwackProject;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.GenericType;
import com.sun.jersey.api.client.ClientResponse;

import javax.ws.rs.core.MediaType;


/**
 * Represents an instance of a test run on AppThwack.
 * @author ahawker
 *
 */
@JsonAutoDetect
@JsonIgnoreProperties(ignoreUnknown=true)
public class AppThwackRun {
	@JsonProperty("run_id")
	public Integer id;
	
	@JsonIgnore
	private WebResource root;
	@JsonIgnore
	private Integer projectId;
	
	
	public AppThwackRun() {
		
	}
	
	/**
	 * Create a new AppThwackRun for the given project and run ids.
	 * @param projectId Id of project which performed the run.
	 * @param runId Id of test run.
	 * @param root HTTP resource root.
	 */
	public AppThwackRun(Integer projectId, Integer runId, WebResource root) {
		this.projectId = projectId;
		this.id = runId;
		this.root = root;
	}
	
	/**
	 * Returns the status string of the current run.
	 * @return Status of the run.
	 */
	public String getStatus() {
		HashMap<String, String> map = root
				.path("run")
				.path(Integer.toString(projectId))
				.path(Integer.toString(id))
				.path("status")
				.get(new GenericType<HashMap<String, String>>(){});
		return map.get("status");
	}
	
	/**
	 * Returns the results generated by this run.
	 * @return result highlights
	 */
	public AppThwackResult getResults() {
		return root
				.path("run")
				.path(Integer.toString(projectId))
				.path(Integer.toString(id))
				.get(AppThwackResult.class);
	}
	
	/**
	 * Returns temporary file object for downloaded results.
	 * @return saved local copy of results
	 */
	public File downloadResults() {
		return null;
	}
	
	public void setRoot(WebResource root) {
		this.root = root;
	}
	
	public void setProject(Integer id) {
		projectId = id;
	}
	
	public String toString() {
		return String.format("%s/run/%d/%d", root, projectId, id);
	}
}
